<?php
namespace Doka\Meetings;

require_once($_SERVER["DOCUMENT_ROOT"]."/bitrix/modules/doka.meetings/classes/mysql/Entity/Request.php");
require_once($_SERVER["DOCUMENT_ROOT"]."/bitrix/modules/doka.meetings/classes/mysql/Entity/Timeslot.php");

use Doka\Meetings\Entity\Request as DokaRequest;
use Doka\Meetings\Entity\Timeslot as DokaTimeslot;

IncludeModuleLangFile(__FILE__);

/**
 * Class Meetings
 * РњРµС‚РѕРґС‹
 * getStatusesFree()
 * getStatusesBusy()
 * getOption($name) - СЃРІРѕР№СЃС‚РІРѕ РІС‹СЃС‚Р°РІРєРё
 * getOptions()
 * getUserInfo($user_id) Рё getUserInfoFull($user_id, $form_id, $fio_result, $fio) - РїРµСЂРµРґРµР»Р°С‚СЊ
 * getTimeslots()
 * getTimeslot($id)
 * getMeetTimeslot($id)
 * GetByID($ID) - ?
 * getUserType() Рё getUserTypeById($user_id)
 * getUnconfirmedRequestsTotal($user_id = false)
 * getTimslotsStatuses($db_data)
 * getFreeTimeslots($user_id = false)
 * getFreeTimesAppoint($user_id = false)
 * getSortedFreeTimesAppoint($user_id = false)
 * getTotalFreeTimesAppoint($user_id = false)
 * getMeetTimeslotsIds()
 * getAllMeetTimeslots()
 * getBusyCompanies($search_group = '')
 * getFreeCompanies($search_group = '')
 * getFreeCompByTime($timeslot_id, $group_id)
 * getFreeTimesByComp($user_id) - РґСѓР±Р»РёСЂСѓРµС‚ getFreeTimesAppoint??
 * getFreeTimesIdsByComp($user_id)
 * getAllTimesByComp($user_id) Рё getAllTimesByCompNamed($user_id, $form_id, $result_id, $fio)
 * getFreeTimesByGroup($group_id)
 * getUsersFreeTimesByGroup($group_id)
 * checkTimeslotIsFree($timeslot_id, $user_arr)
 * confirmRequest($request)
 * rejectRequest($request)
 * timeoutRequest($request)
 * getActiveRequest($timeslot_id, $sender_id, $receiver_id)
 * getAllMeetTimesByGroup($group_id)
 * getRejectedRequests($group_id)
 *
 * getUserGroubSimple($user_id)
 */
class Requests extends DokaRequest
{
    private $timeslots = array();

    private $options = array();

    private $timeslots_meet_total = 0;

    public function __construct($app_id, $new = false)
    {
        global $USER;

        $this->user_id = (int)$USER->GetID();

        $this->app_id = (int)$app_id;
        if ($new && $this->app_id <= 0) die('WRONG APP ID');

        // РџРѕР»СѓС‡Р°РµРј СЃРїРёСЃРѕРє С‚Р°Р№РјСЃР»РѕС‚РѕРІ РґР»СЏ С‚РµРєСѓС‰РµР№ РІС‹СЃС‚Р°РІРєРё
        $res = DokaTimeslot::GetList(array('TIME_FROM' => 'ASC'), array('EXHIBITION_ID' => $this->app_id), array('ID', 'NAME', 'SLOT_TYPE'), true);
        while ($item = $res->Fetch()) {
            if (!isset($this->options['IS_LOCKED']))
                $this->options = array(
                    'IS_LOCKED' => (bool)$item['IS_LOCKED'],
                    'GUESTS_GROUP' => $item['GUESTS_GROUP'],
                    'IS_GUEST' => $item['IS_GUEST'],
                    'IS_HB' => $item['IS_HB'],
                    'MEMBERS_GROUP' => $item['MEMBERS_GROUP'],
                    'ADMINS_GROUP' => $item['ADMINS_GROUP'],
                    'EVENT_REJECT' => $item['EVENT_REJECT'],
                    'EVENT_SENT' => $item['EVENT_SENT'],
                    'EXHIBITION_NAME' => $item['EXHIBITION_NAME'],
                    'EXHIBITION_CODE' => $item['EXHIBITION_CODE'],
                    'REPR_PROP_ID' => $item['REPR_PROP_ID'],
                    'REPR_PROP_CODE' => $item['REPR_PROP_CODE'],
                    'FORM_ID' => $item['FORM_ID'],
                    'FORM_RES_CODE' => $item['FORM_RES_CODE'],
                );
            $this->timeslots[$item['ID']] = array(
                'name' => $item['NAME'],
                'type' => $item['SLOT_TYPE']
            );
            if ($item['SLOT_TYPE'] == DokaTimeslot::getTypeCode(DokaTimeslot::TYPE_MEET))
                $this->timeslots_meet_total++;
        }

        if (!count($this->timeslots)) {
            throw new \Exception("EMPTY TIMESLOTS", 1);
        }

    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ СЃС‚Р°С‚СѓСЃС‹, СЃС‡РёС‚Р°СЋС‰РёРµСЃСЏ СЃРІРѕР±РѕРґРЅС‹РјРё
     * @return array id СЃС‚Р°С‚СѓСЃРѕРІ
     */
    public function getStatusesFree()
    {
        return array(self::STATUS_EMPTY, self::STATUS_REJECTED, self::STATUS_TIMEOUT);
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ СЃС‚Р°С‚СѓСЃС‹, СЃС‡РёС‚Р°СЋС‰РёРµСЃСЏ Р·Р°РЅСЏС‚С‹РјРё
     * @return array id СЃС‚Р°С‚СѓСЃРѕРІ
     */
    public function getStatusesBusy()
    {
        return array(self::STATUS_PROCESS, self::STATUS_CONFIRMED);
    }

    public function getOption($name)
    {
        if (isset($this->options[$name]))
            return $this->options[$name];

        return false;
    }

    public function getOptions()
    {
        return $this->options;
    }

    public function getUserInfo($user_id)
    {
        global $USER;
        if ($user_id <= 0) return false;

        $filter = array( 'ID' => $user_id );
        $select = array(
            'SELECT' => array($this->getOption('REPR_PROP_CODE')),
            'FIELDS' => array('WORK_COMPANY', 'ID', 'EMAIL')
        );
        $rsUser = \CUser::GetList(($by="id"), ($order="desc"), $filter, $select);
        if ($arUser = $rsUser->Fetch()) {
            return array(
                'company_id' => $arUser['ID'],
                'company_name' => $arUser['WORK_COMPANY'],
                'repr_name' => $arUser[$this->getOption('REPR_PROP_CODE')],
                'email' => $arUser['EMAIL'],
            );
        }

        return false;
    }

    public function getUserInfoFull($user_id, $form_id, $fio_result, $fio)
    {
        global $USER;
        if ($user_id <= 0) return false;

        $filter = array( 'ID' => $user_id );
        $select = array(
            'SELECT' => array($fio_result),
            'FIELDS' => array('WORK_COMPANY', 'ID', 'EMAIL')
        );
        $rsUser = \CUser::GetList(($by="id"), ($order="desc"), $filter, $select);
        if ($arUser = $rsUser->Fetch()) {
            $arAnswer = \CFormResult::GetDataByID(
                        $arUser[$fio_result], 
                        array(),  // РІРѕРїСЂРѕСЃ "РљР°РєРёРµ РѕР±Р»Р°СЃС‚Рё Р·РЅР°РЅРёР№ РІР°СЃ РёРЅС‚РµСЂРµСЃСѓСЋС‚?" 
                        $arResultTmp, 
                        $arAnswer2);
            return array(
                'company_id' => $arUser['ID'],
                'company_name' => $arUser['WORK_COMPANY'],
                'repr_name' => trim($arAnswer2[$fio[0][0]][$fio[0][1]]["USER_TEXT"])." ".trim($arAnswer2[$fio[1][0]][$fio[1][1]]["USER_TEXT"]),
                'email' => trim($arAnswer2[$fio[2][0]][$fio[2][1]]["USER_TEXT"]),
            );
        }
        return false;
    }

    public function getTimeslots()
    {
        return $this->timeslots;
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РёРЅС„Рѕ РїРѕ С‚Р°Р№РјСЃР»РѕС‚Сѓ РїРѕ РµРіРѕ id
     * @param  int $id $timeslot_id
     * @return mixed
     */
    public function getTimeslot($id)
    {
        if (array_key_exists($id, $this->timeslots)) {
            $timeslot_arr = $this->timeslots[$id];
            
            return array_merge($timeslot_arr, array('id' => $id));
        }

        return false;
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РёРЅС„Сѓ С‚РѕР»СЊРєРѕ РґР»СЏ С‚Р°Р№РјСЃР»РѕС‚Р° С‚РёРїР° "Р’СЃС‚СЂРµС‡Р°"
     */
    public function getMeetTimeslot($id)
    {
        if ($timeslot = $this->getTimeslot($id)) {
            if (in_array($timeslot['id'], $this->getMeetTimeslotsIds()))
                return $timeslot;
        }

        return false;
    }

    function GetByID($ID)
    {
        return self::GetList(array(), array("ID" => $ID));
    }

    public function getUserType()
    {
        global $USER;

        $arGroups = $USER->GetUserGroupArray();
        if (in_array($this->getOption('ADMINS_GROUP'), $arGroups) || $USER->IsAdmin())
            $group_type = 'ADMIN';
        else if (in_array($this->getOption('GUESTS_GROUP'), $arGroups))
            $group_type = 'GUEST';
        else
            $group_type = 'PARTICIP';

        return $group_type;
    }

    public function getUserTypeById($user_id)
    {
        global $USER;
        
        $arGroups = \CUser::GetUserGroup($user_id);
        if (in_array($this->getOption('ADMINS_GROUP'), $arGroups) || $USER->IsAdmin())
            $group_type = 'ADMIN';
        else if (in_array($this->getOption('GUESTS_GROUP'), $arGroups))
            $group_type = 'GUEST';
        else
            $group_type = 'PARTICIP';

        return $group_type;
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РєРѕР»РёС‡РµСЃС‚РІРѕ РЅРµРїРѕРґС‚РІРµСЂР¶РґРµРЅРЅС‹С… Р·Р°РїСЂРѕСЃРѕРІ РЅР° РІСЃС‚СЂРµС‡Рё РґР»СЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РїРѕ РµРіРѕ id.
     * @param  int $user_id id РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
     * @return array РјР°СЃСЃРёРІ СЃ РєРѕР»РёС‡РµСЃС‚РІРѕРј РѕС‚РїСЂР°РІР»РµРЅРЅС‹С… Рё РІС…РѕРґСЏС‰РёС… РЅРµРїРѕРґС‚РІРµСЂР¶РґРµРЅРЅС‹С… Р·Р°РїСЂРѕСЃРѕРІ
     */
    public function getUnconfirmedRequestsTotal($user_id = false)
    {
        global $DB;
        $user_id = (!$user_id) ? $this->user_id : (int)$user_id;
        if ($user_id <= 0) 
            return false;

        $sSQL = 'SELECT COUNT(*) AS TOTAL, SUM(SENDER_ID = 1) AS SENT FROM ' . self::$sTableName 
            . ' WHERE (RECEIVER_ID=' . $DB->ForSql($user_id) . ' OR SENDER_ID=' . $DB->ForSql($user_id) . ') AND STATUS = ' . self::STATUS_PROCESS . ' AND EXHIBITION_ID=' . $this->app_id;

        $res = $DB->Query($sSQL, false, 'FILE: '.__FILE__.'<br />LINE: ' . __LINE__);
        if ($data = $res->Fetch()) {
            return array(
                'sent' => (int)$data['SENT'],
                'incoming' => $data['TOTAL'] - $data['SENT'],
                'total' => (int)$data['TOTAL']
            );
            
        }

        return false;
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РјР°СЃСЃРёРІ СЃС‚Р°С‚СѓСЃРѕРІ РЅР° РѕСЃРЅРѕРІР°РЅРёРё РїРѕР»РµР№, РїРѕР»СѓС‡РµРЅРЅС‹С… РёР· Р‘Р”
     * @return array timeslot_id => status_id
     */
    public function getTimslotsStatuses($db_data)
    {
        $timeslots_statuses = array();

        foreach ($db_data as $column => $status_id) {
            if (strpos($column, 'STATUS_') === 0) {
                $timeslot_id = (int)str_replace('STATUS_', '', $column);
                $timeslots_statuses[$timeslot_id] = $status_id;
            }
        }

        return $timeslots_statuses;
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РЅРµР·Р°РЅСЏС‚С‹Рµ С‚Р°Р№РјСЃР»РѕС‚С‹ РґР»СЏ РєРѕРјРїР°РЅРёРё user_id
     * РќРµР·Р°РЅСЏС‚С‹Рµ - РµСЃР»Рё РЅРµ Р±С‹Р»Рѕ Р·Р°РїСЂРѕСЃРѕРІ РёР»Рё СЃС‚Р°С‚СѓСЃС‹ "РћС‚РјРµРЅРµРЅ" РёР»Рё "РћС‚РјРµРЅРµРЅ РїРѕ С‚Р°Р№РјР°СѓС‚Сѓ"
     * @param  int $user_id id РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ-РєРѕРјРїР°РЅРёРё
     * @return array
     */
    public function getFreeTimeslots($user_id = false)
    {
        global $DB;
        $user_id = (!$user_id) ? $this->user_id : (int)$user_id;
        if ($user_id <= 0) 
            return false;
        $free_timeslots = array();

        // РЎС‚Р°С‚СѓСЃС‹ РґР»СЏ РЅРµР·Р°РЅСЏС‚С‹С… С‚Р°Р№РјСЃР»РѕС‚РѕРІ
        $statuses_free = $this->getStatusesFree();

        $sSQL = 'SELECT * FROM ' . self::$sTableNameShedule.$this->app_id . ' WHERE USER_ID=' . $DB->ForSql($user_id);

        $res = $DB->Query($sSQL, false, 'FILE: '.__FILE__.'<br />LINE: ' . __LINE__);

        // РЎС„РѕСЂРјРёСЂСѓРµРј СѓРґРѕР±РѕС‡РёС‚Р°РµРјС‹Р№ РјР°СЃСЃРёРІ СЃС‚Р°С‚СѓСЃРѕРІ Р·Р°РїСЂРѕСЃРѕРІ РґР»СЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
        $timeslot_statuses = array();
        if ($data = $res->Fetch()) {
            $timeslot_statuses = $this->getTimslotsStatuses($data);
        }
        // РџРѕР»СѓС‡РёРј РЅРµР·Р°РЅСЏС‚С‹Рµ С‚Р°Р№РјСЃР»РѕС‚С‹
        foreach ($timeslot_statuses as $timeslot_id => $status_id) {
            if (in_array($status_id, $statuses_free))
                $free_timeslots[] = array(
                    'id' => $timeslot_id,
                    'name' => $this->timeslots[$timeslot_id]['name'],
                    'type' => $this->timeslots[$timeslot_id]['type'],
                );
        }

        return $free_timeslots;
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РјР°СЃСЃРёРІ СЃРѕРґРµСЂР¶Р°С‰РёР№ РґРѕСЃС‚СѓРїРЅС‹Рµ С‚Р°Р№РјСЃР»РѕС‚С‹ С‚РёРїР° Р’СЃС‚СЂРµС‡Р°
     * @param  int $user_id id РєРѕРјРїР°РЅРёРё
     * @return array (id, name)
     */
    public function getFreeTimesAppoint($user_id = false)
    {
        $free_timeslots = $this->getFreeTimeSlots($user_id);
        $slot_type_meet_code = DokaTimeslot::getTypeCode(DokaTimeslot::TYPE_MEET);
        foreach ($free_timeslots as $key => $timeslot) {
            if ($timeslot['type'] != $slot_type_meet_code)
                unset($free_timeslots[$key]);
            unset($free_timeslots[$key]['type']);
        }

        return $free_timeslots;
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РјР°СЃСЃРёРІ СЃРѕРґРµСЂР¶Р°С‰РёР№ РґРѕСЃС‚СѓРїРЅС‹Рµ С‚Р°Р№РјСЃР»РѕС‚С‹ С‚РёРїР° Р’СЃС‚СЂРµС‡Р° РІ РїРѕСЂСЏРґРєРµ СЃРѕСЂС‚РёСЂРѕРІРєРё
     * @param  int $user_id id РєРѕРјРїР°РЅРёРё
     * @return array (id, name)
     */
    public function getSortedFreeTimesAppoint($user_id = false)
    {
        $free_timeslots = $this->getFreeTimeSlots($user_id);
		$allTimes = $this->getTimeslots();
        $slot_type_meet_code = DokaTimeslot::getTypeCode(DokaTimeslot::TYPE_MEET);
		if(empty($free_timeslots)){
			$counter = 0;
		  foreach ($allTimes as $key => $timeslot) {
			  if($timeslot['type'] == $slot_type_meet_code){
				$free_timeslots[$counter]["id"] = $key;
				$free_timeslots[$counter]["name"] = $timeslot['name'];
				$counter++;
			  }
		  }
		  return $free_timeslots;
		}
        foreach ($free_timeslots as $key => $timeslot) {
            if ($timeslot['type'] == $slot_type_meet_code){
				$allTimes[$timeslot['id']]['free'] = 1;
			}
        }
		$free_timeslots = array();
		$counter = 0;
        foreach ($allTimes as $key => $timeslot) {
            if (isset($timeslot['free']) && $timeslot['free'] == 1){
				$free_timeslots[$counter]["id"] = $key;
				$free_timeslots[$counter]["name"] = $timeslot['name'];
				$counter++;
			}
        }
        return $free_timeslots;
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РєРѕР»РёС‡РµСЃС‚РІРѕ  РґРѕСЃС‚СѓРїРЅС‹С… С‚Р°Р№РјСЃР»РѕС‚РѕРІ С‚РёРїР° Р’СЃС‚СЂРµС‡Р°
     * @param  int $user_id id РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
     * @return int РєРѕР»-РІРѕ СЃРІРѕР±РѕРґРЅС‹С… С‚Р°Р№РјСЃР»РѕС‚РѕРІ
     */
    public function getTotalFreeTimesAppoint($user_id = false)
    {
        return count($this->getFreeTimesAppoint($user_id));
    }

    /**
     * РІРѕР·РІСЂР°С‰Р°РµС‚ РјР°СЃСЃРёРІ id С‚Р°Р№РјСЃР»РѕС‚РѕРІ С‚РёРїР° "Р’СЃС‚СЂРµС‡Р°"
     */
    public function getMeetTimeslotsIds()
    {
        $meet_timeslots_ids = array();
        foreach ($this->timeslots as $id => $item) {
            if ($item['type'] == DokaTimeslot::getTypeCode(DokaTimeslot::TYPE_MEET)) {
                $meet_timeslots_ids[] = $id;
            }
        }

        return $meet_timeslots_ids;
    }

    /**
     * РІРѕР·РІСЂР°С‰Р°РµС‚ РјР°СЃСЃРёРІ С‚Р°Р№РјСЃР»РѕС‚РѕРІ С‚РёРїР° "Р’СЃС‚СЂРµС‡Р°"
     */
    public function getAllMeetTimeslots()
    {
		$allTimes = $this->getTimeslots();
        $slot_type_meet_code = DokaTimeslot::getTypeCode(DokaTimeslot::TYPE_MEET);
        foreach ($allTimes as $key => $timeslot) {
            if ($timeslot['type'] != $slot_type_meet_code){
				 unset($allTimes[$key]);
			}
			unset($allTimes[$key]['type']);
        }
        return $allTimes;
    }


    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РєРѕРјРїР°РЅРёРё Сѓ РєРѕС‚РѕСЂС‹С… Р·Р°РЅСЏС‚С‹ РІСЃРµ СЃР»РѕС‚С‹ РґР»СЏ РІС‹СЃС‚Р°РІРєРё
     * @param  id $search_group id РіСЂСѓРїРїС‹
     * @return array РєРѕРјРїР°РЅРёРё СЃ РїРѕР»СЏРјРё (id, name)
     */
    public function getBusyCompanies($search_group = '')
    {
        global $DB;

        $companies = array();

        // РЎРѕР±РµСЂРµРј РІ РєСѓС‡Сѓ РІСЃРµ С‚Р°Р№РјСЃР»РѕС‚С‹ СЃ С‚РёРїРѕРј РІСЃС‚СЂРµС‡Р°
        $meet_timeslots_ids = $this->getMeetTimeslotsIds();

        // РЎС‚Р°С‚СѓСЃС‹, РєРѕС‚РѕСЂС‹Рµ РѕР·РЅР°С‡Р°СЋС‚, С‡С‚Рѕ СЃР»РѕС‚ СЃРІРѕР±РѕРґРµРЅ
        $statuses_free = $this->getStatusesFree();
        $sWhere = ' WHERE ';
        $leftJoin = ' LEFT JOIN b_user ON b_user.ID=ms.USER_ID ';
		if($search_group){
			$leftJoin .= 'LEFT JOIN b_user_group bug ON b_user.ID=bug.USER_ID';
			$sWhere .= ' bug.GROUP_ID=' . $DB->ForSql($search_group) . ' AND ';
		}
        $arStatusWhere = array();
        foreach ($meet_timeslots_ids as $timeslot_id) {
            $arStatusWhere[] = 'STATUS_' . $timeslot_id . ' NOT IN (' . implode(',', $statuses_free) . ')';
        }

        $sSQL = 'SELECT ms.USER_ID as company_id, b_user.WORK_COMPANY as company_name FROM ' . self::$sTableNameShedule.$this->app_id . ' ms ' . $leftJoin . $sWhere . implode(' AND ', $arStatusWhere). ' ORDER BY company_name';

        $res = $DB->Query($sSQL, false, 'FILE: '.__FILE__.'<br />LINE: ' . __LINE__);

        return $res;
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РєРѕРјРїР°РЅРёРё Сѓ РєРѕС‚РѕСЂС‹С… РµСЃС‚СЊ СЃРІРѕР±РѕРґРЅС‹Рµ СЃР»РѕС‚С‹
     * @param  id $search_group id РіСЂСѓРїРїС‹
     * @return array РєРѕРјРїР°РЅРёРё СЃ РїРѕР»СЏРјРё (id, name)
     */
    public function getFreeCompanies($search_group = '')
    {
        global $DB;

        $companies = array();

        // РЎРѕР±РµСЂРµРј РІ РєСѓС‡Сѓ РІСЃРµ С‚Р°Р№РјСЃР»РѕС‚С‹ СЃ С‚РёРїРѕРј РІСЃС‚СЂРµС‡Р°
        $meet_timeslots_ids = $this->getMeetTimeslotsIds();

        // РЎС‚Р°С‚СѓСЃС‹, РєРѕС‚РѕСЂС‹Рµ РѕР·РЅР°С‡Р°СЋС‚, С‡С‚Рѕ СЃР»РѕС‚ СЃРІРѕР±РѕРґРµРЅ
        $statuses_free = $this->getStatusesFree();
        $sWhere = ' WHERE ';
        $leftJoin = ' LEFT JOIN b_user ON b_user.ID=ms.USER_ID ';
        if($search_group){
            $leftJoin .= 'LEFT JOIN b_user_group bug ON b_user.ID=bug.USER_ID';
            $sWhere .= ' bug.GROUP_ID=' . $DB->ForSql($search_group) . ' AND ';
        }
        $arStatusWhere = array();
        foreach ($meet_timeslots_ids as $timeslot_id) {
            $arStatusWhere[] = 'STATUS_' . $timeslot_id . ' IN (' . implode(',', $statuses_free) . ')';
        }

        $sSQL = 'SELECT ms.USER_ID as company_id, b_user.WORK_COMPANY as company_name FROM ' . self::$sTableNameShedule.$this->app_id . ' ms ' . $leftJoin . $sWhere .' ( '. implode(' OR ', $arStatusWhere).' ) ORDER BY company_name';
        $res = $DB->Query($sSQL, false, 'FILE: '.__FILE__.'<br />LINE: ' . __LINE__);

        return $res;
    }
    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РјР°СЃСЃРёРІ, СЃРѕРґРµСЂР¶Р°С‰РёР№ РєРѕРјРїР°РЅРёРё, Сѓ РєРѕС‚РѕСЂС‹С… СЃРІРѕР±РѕРґРµРЅ СЃР»РѕС‚ $timeslot_id
     * @param  int $timeslot_id id С‚Р°Р№РјСЃР»РѕС‚Р°
     * @return array РјР°СЃСЃРёРІ РєРѕРјРїР°РЅРёР№ СЃ РїРѕР»СЏРјРё (id, name)
     */
    public function getFreeCompByTime($timeslot_id, $group_id)
    {
        if ( (int)$timeslot_id <= 0 ) 
            return false;

        global $DB;

        $companies = array();

        // РЎС‚Р°С‚СѓСЃС‹, РєРѕС‚РѕСЂС‹Рµ РѕР·РЅР°С‡Р°СЋС‚, С‡С‚Рѕ СЃР»РѕС‚ СЃРІРѕР±РѕРґРµРЅ
        $statuses_free = $this->getStatusesFree();
        $sWhere = ' WHERE bug.GROUP_ID=' . $DB->ForSql($group_id);

		if($this->getOption('GUESTS_GROUP') == $group_id){
            $guestField = "UF_MR";
            if($this->getOption('IS_HB')){
                $guestField = "UF_HB";
            }
			$sWhere = ' LEFT JOIN b_uts_user ON b_uts_user.VALUE_ID=bu.ID'.$sWhere.' AND b_uts_user.'.$guestField.'=1';
		}

        $sSQL = 'SELECT bu.WORK_COMPANY, bu.ID, ms.USER_ID, ms.STATUS_' . $timeslot_id . ' FROM `b_user` bu INNER JOIN `b_user_group` bug ON bu.ID=bug.USER_ID LEFT JOIN `' . self::$sTableNameShedule.$this->app_id 
            . '` ms ON bu.ID=ms.USER_ID'. $sWhere. ' GROUP BY bu.ID ORDER BY bu.WORK_COMPANY';


        $res = $DB->Query($sSQL, false, 'FILE: '.__FILE__.'<br />LINE: ' . __LINE__);

        while ($data = $res->Fetch()) {
            if ($data['USER_ID'] === null) {//Р­С‚Рѕ Р·РЅР°С‡РёС‚ РІСЃРµ С‚Р°Р№РјСЃР»РѕС‚С‹ СЃРІРѕР±РѕРґРЅС‹
				$companies[] = array(
					'id' => $data['ID'],
					'name' => $data['WORK_COMPANY']
				);
            }
			elseif(in_array($data['STATUS_' . $timeslot_id ], $statuses_free)){
			  $companies[] = array(
				  'id' => $data['ID'],
				  'name' => $data['WORK_COMPANY']
			  );
            }
        }

        return $companies;
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РјР°СЃСЃРёРІ СЃРѕРґРµСЂР¶Р°С‰РёР№ СЃРІРѕР±РѕРґРЅС‹Рµ С‚Р°Р№РјСЃР»РѕС‚С‹ С‚РёРїР° Р’СЃС‚СЂРµС‡Р° РґР»СЏ РєРѕРјРїР°РЅРёРё user_id
     * @param  int $user_id id РїСЂРµРґСЃС‚Р°РІРёС‚РµР»СЏ РєРѕРјРїР°РЅРёРё
     * @return array РјР°СЃСЃРёРІ С‚Р°Р№РјСЃР»РѕС‚РѕРІ СЃ РїРѕР»СЏРјРё (id, name)
     */
    public function getFreeTimesByComp($user_id)
    {
        $user_id = (!$user_id) ? $this->user_id : (int)$user_id;
        if ($user_id <= 0) 
            return false;

        global $DB;

        $timeslots = array();

        $sWhere = ' WHERE USER_ID=' . $user_id;

        $sSQL = 'SELECT * FROM ' . self::$sTableNameShedule.$this->app_id . $sWhere;

        $res = $DB->Query($sSQL, false, 'FILE: '.__FILE__.'<br />LINE: ' . __LINE__);

        if ($data = $res->Fetch()) {
            // СЃР»РѕС‚С‹ С‚РёРїР° РІСЃС‚СЂРµС‡Р°
            $meet_timeslots_ids = $this->getMeetTimeslotsIds();
            // СЃС‚Р°С‚СѓСЃС‹ СЃР»РѕС‚РѕРІ РЅР° РѕСЃРЅРѕРІР°РЅРёРё РґР°РЅРЅС‹С… РёР· Р‘Р”
            $timeslot_statuses = $this->getTimslotsStatuses($data);
            foreach ($timeslot_statuses as $timeslot_id => $status_id) {
                // РµСЃР»Рё СЃР»РѕС‚ С‚РёРїР° "РІСЃС‚СЂРµС‡Р°"
                if (in_array($timeslot_id, $meet_timeslots_ids))
                    $timeslots[] = array(
                        'id' => $timeslot_id,
                        'name' => $this->timeslots[$timeslot_id]['name']
                    );
            }
        }

        return $timeslots;
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РјР°СЃСЃРёРІ СЃРѕРґРµСЂР¶Р°С‰РёР№ id СЃРІРѕР±РѕРґРЅС‹С… С‚Р°Р№РјСЃР»РѕС‚РѕРІ С‚РёРїР° Р’СЃС‚СЂРµС‡Р° РґР»СЏ РєРѕРјРїР°РЅРёРё user_id
     * @param  int $user_id id РїСЂРµРґСЃС‚Р°РІРёС‚РµР»СЏ РєРѕРјРїР°РЅРёРё
     * @return array РјР°СЃСЃРёРІ С‚Р°Р№РјСЃР»РѕС‚РѕРІ id
     */
    public function getFreeTimesIdsByComp($user_id)
    {
        $user_id = (!$user_id) ? $this->user_id : (int)$user_id;
        if ($user_id <= 0) 
            return false;

        global $DB;

        $timeslots = array();

        $sWhere = ' WHERE USER_ID=' . $user_id;

        $sSQL = 'SELECT * FROM ' . self::$sTableNameShedule.$this->app_id . $sWhere;

        $res = $DB->Query($sSQL, false, 'FILE: '.__FILE__.'<br />LINE: ' . __LINE__);

        if ($data = $res->Fetch()) {
            // СЃР»РѕС‚С‹ С‚РёРїР° РІСЃС‚СЂРµС‡Р°
            $meet_timeslots_ids = $this->getMeetTimeslotsIds();
            // СЃС‚Р°С‚СѓСЃС‹ СЃР»РѕС‚РѕРІ РЅР° РѕСЃРЅРѕРІР°РЅРёРё РґР°РЅРЅС‹С… РёР· Р‘Р”
            $timeslot_statuses = $this->getTimslotsStatuses($data);
            foreach ($timeslot_statuses as $timeslot_id => $status_id) {
                // РµСЃР»Рё СЃР»РѕС‚ С‚РёРїР° "РІСЃС‚СЂРµС‡Р°"
                if (in_array($timeslot_id, $meet_timeslots_ids))
                    $timeslots[] = $timeslot_id;
            }
        }

        return $timeslots;
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РјР°СЃСЃРёРІ СЃРѕРґРµСЂР¶Р°С‰РёР№ РІСЃРµ С‚Р°Р№РјСЃР»РѕС‚С‹ С‚РёРїР° Р’СЃС‚СЂРµС‡Р° РґР»СЏ РєРѕРјРїР°РЅРёРё $user_id. Р’ РјР°СЃСЃРёРІ РЅРµ РїРѕРїР°РґР°СЋС‚ Р·Р°РїСЂРѕСЃС‹ СЃРѕ СЃС‚Р°С‚СѓСЃРѕРј РћС‚РјРµРЅРµРЅ
     * @param  int $user_id id РїСЂРµРґСЃС‚Р°РІРёС‚РµР»СЏ РєРѕРјРїР°РЅРёРё
     * @return array РјР°СЃСЃРёРІ С‚Р°Р№РјСЃР»РѕС‚РѕРІ
     */
    public function getAllTimesByComp($user_id)
    {
        $user_id = (!$user_id) ? $this->user_id : (int)$user_id;
        if ($user_id <= 0) 
            return false;

        global $DB;

        $timeslots = array();

        $statuses_rejected = array(self::STATUS_REJECTED, self::STATUS_TIMEOUT);

        // СЃРѕСЂС‚РёСЂРѕРІРєР° РїРѕ СѓР±С‹РІР°РЅРёСЋ ID РІ РєР°РєРѕРј-С‚Рѕ СЃРјС‹СЃР»Рµ РіР°СЂР°РЅС‚РёСЂСѓРµС‚, С‡С‚Рѕ Р±СѓРґРµС‚ Р°РєС‚СѓР°Р»СЊРЅС‹Р№ СЃС‚Р°С‚СѓСЃ
        $sSQL = 'SELECT t1.*, b_uts_user.'.$this->getOption("REPR_PROP_CODE").' as repr_fio, b_user.WORK_COMPANY, t1.SENDER_ID as repr_id FROM ' . self::$sTableName . ' t1 LEFT JOIN b_user ON b_user.ID=SENDER_ID LEFT JOIN b_uts_user ON b_uts_user.VALUE_ID=SENDER_ID WHERE RECEIVER_ID=' . $DB->ForSql($user_id) 
                . ' AND STATUS NOT IN (' . implode(',', $statuses_rejected) . ') AND EXHIBITION_ID=' . $this->app_id .
                ' UNION ALL ' . 
                'SELECT t2.*, b_uts_user.'.$this->getOption("REPR_PROP_CODE").' as repr_fio, b_user.WORK_COMPANY, t2.RECEIVER_ID as repr_id FROM ' . self::$sTableName . ' t2 LEFT JOIN b_user ON b_user.ID=RECEIVER_ID LEFT JOIN b_uts_user ON b_uts_user.VALUE_ID=RECEIVER_ID WHERE SENDER_ID=' . $DB->ForSql($user_id) 
                . ' AND STATUS NOT IN (' . implode(',', $statuses_rejected) . ') AND EXHIBITION_ID=' . $this->app_id . ' ORDER BY ID DESC';

        $res = $DB->Query($sSQL, false, 'FILE: '.__FILE__.'<br />LINE: ' . __LINE__);

        while ($data = $res->Fetch()) {
            if (!array_key_exists($data['TIMESLOT_ID'], $timeslots)) {
                $timeslots[$data['TIMESLOT_ID']] = array(
                    'id' => $data['TIMESLOT_ID'],
                    'name' => $this->timeslots[$data['TIMESLOT_ID']]['name'],
                    'meet' => array(
                        'request_id' => $data['ID'],
                        'status' => $data['STATUS'],
                        'company_id' => $data['repr_id'],
                        'company_rep' => $data['repr_fio'],
                        'company_name' => $data['WORK_COMPANY'],
                        'modified_by' => $data['MODIFIED_BY'],
                    )
                );
            }
        }

        return $timeslots;
    }

    /**
     * Р’РѕР·РІСЂР°С‰Р°РµС‚ РјР°СЃСЃРёРІ СЃРѕРґРµСЂР¶Р°С‰РёР№ РІСЃРµ С‚Р°Р№РјСЃР»РѕС‚С‹ С‚РёРїР° Р’СЃС‚СЂРµС‡Р° РґР»СЏ РєРѕРјРїР°РЅРёРё $user_id. Р’ РјР°СЃСЃРёРІ РЅРµ РїРѕРїР°РґР°СЋС‚ Р·Р°РїСЂРѕСЃС‹ СЃРѕ СЃС‚Р°С‚СѓСЃРѕРј РћС‚РјРµРЅРµРЅ. Р